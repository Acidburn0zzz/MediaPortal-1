#region Copyright (C) 2005-2011 Team MediaPortal

// Copyright (C) 2005-2011 Team MediaPortal
// http://www.team-mediaportal.com
// 
// MediaPortal is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// MediaPortal is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MediaPortal. If not, see <http://www.gnu.org/licenses/>.

#endregion

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using Gentle.Framework;
using TvLibrary.Interfaces;
using TvLibrary.Log;
using StatementType = Gentle.Framework.StatementType;

namespace TvDatabase
{
  /// <summary>
  /// Instances of this class represent the properties and methods of a row in the table <b>Program</b>.
  /// </summary>
  [TableName("ProgramCredit")]
  public class ProgramCredit : Persistent
  {
    #region Members

    private bool isChanged;
    [TableColumn("idProgramCredit", NotNull = true), PrimaryKey(AutoGenerated = true)]
    private int idProgramCredit;

    [TableColumn("idProgram", NotNull = true)]
    private int idProgram;

    [TableColumn("role", NotNull = true)]
    private string role;

    [TableColumn("person", NotNull = true)]
    private string person;

    #endregion

    public static IList<ProgramCredit> ListAllDistinctRoles()
    {
      IDbCommand icmd = Broker.Provider.GetCommand();
      string sql = "Select ROW_NUMBER() OVER (ORDER BY credit.Role) AS idProgramCredit, credit.Role FROM (SELECT DISTINCT role FROM ProgramCredit) credit";
      SqlStatement stmt = new SqlStatement(StatementType.Select, icmd, sql);

      IList<ProgramCredit> roles = ObjectFactory.GetCollection<ProgramCredit>(stmt.Execute());
      return roles;
    }

    #region Constructors
    /// <summary> 
    /// Create a new object by specifying all fields (except the auto-generated primary key field). 
    /// </summary> 
    public ProgramCredit(int idProgram, string role, string person)
    {
      isChanged = true;
      this.idProgram = idProgram;
      this.role = role;
      this.person = person;
    }

    public ProgramCredit(string role, int idProgramCredit)
    {
      isChanged = true;
      this.idProgramCredit = idProgramCredit;
      this.role = role;
    }    
 

    #endregion

    #region Public Properties

    /// <summary>
    /// Indicates whether the entity is changed and requires saving or not.
    /// </summary>
    public bool IsChanged
    {
      get { return isChanged; }
    }

    /// <summary>
    /// Property relating to database column idProgram
    /// </summary>
    public int IdProgramCredit
    {
      get { return idProgramCredit; }
    }

    /// <summary>
    /// Property relating to database column role
    /// </summary>
    public string Role
    {
      get { return role; }
      set
      {
        isChanged |= role != value;
        role = value;
      }
    }

    /// <summary>
    /// Property relating to database column person
    /// </summary>
    public string Person
    {
      get { return person; }
      set
      {
        isChanged |= person != value;
        person = value;
      }
    }

    #endregion

    #region Storage and Retrieval

    /// <summary>
    /// Static method to retrieve all instances that are stored in the database in one call
    /// </summary>
    public static IList<ProgramCredit> ListAll()
    {
      return Broker.RetrieveList<ProgramCredit>();
    }

   


    /// <summary>
    /// Retrieves an entity given it's id.
    /// </summary>
    public static ProgramCredit Retrieve(int id)
    {
      // Return null if id is smaller than seed and/or increment for autokey
      if (id < 1)
      {
        return null;
      }
      Key key = new Key(typeof(ProgramCredit), true, "idProgramCredit", id);
      return Broker.RetrieveInstance<ProgramCredit>(key);
    }

    /// <summary>
    /// Retrieves an entity given it's id, using Gentle.Framework.Key class.
    /// This allows retrieval based on multi-column keys.
    /// </summary>
    public static ProgramCredit Retrieve(Key key)
    {
      return Broker.RetrieveInstance<ProgramCredit>(key);
    }

    /// <summary>
    /// Persists the entity if it was never persisted or was changed.
    /// </summary>
    public override void Persist()
    {
      if (IsChanged || !IsPersisted)
      {
        try
        {
          base.Persist();
        }
        catch (Exception ex)
        {
          Log.Error("Exception in ProgramCredit.Persist() with Message {0}", ex.Message);
          return;
        }
        isChanged = false;
      }
    }

    #endregion

    #region Relations

    /// <summary>
    ///
    /// </summary>
    public Program ReferencedProgram()
    {
      return Program.Retrieve(idProgram);
    }

    #endregion

    public static IList<ProgramCreditDTO> ConvertToDtoList(IEnumerable<ProgramCredit> roles)
    {
      IList<ProgramCreditDTO> creditDtos = new ObservableCollection<ProgramCreditDTO>();
      foreach (var role in roles)
      {
        var creditDto = new ProgramCreditDTO { Person = role.Person,  Role = role.Role, IdCredit = role.IdProgramCredit};
        creditDtos.Add(creditDto);
      }

      return creditDtos;
    }
  }
}