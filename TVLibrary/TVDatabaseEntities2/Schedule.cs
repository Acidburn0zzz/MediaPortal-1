//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace TVDatabaseEntities
{
    public partial class Schedule
    {
        #region Primitive Properties
    
        public virtual int id_Schedule
        {
            get;
            set;
        }
    
        public virtual int idChannel
        {
            get { return _idChannel; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idChannel != value)
                    {
                        if (Channel != null && Channel.idChannel != value)
                        {
                            Channel = null;
                        }
                        _idChannel = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _idChannel;
    
        public virtual int scheduleType
        {
            get;
            set;
        }
    
        public virtual string programName
        {
            get;
            set;
        }
    
        public virtual System.DateTime startTime
        {
            get;
            set;
        }
    
        public virtual System.DateTime endTime
        {
            get;
            set;
        }
    
        public virtual int maxAirings
        {
            get;
            set;
        }
    
        public virtual int priority
        {
            get;
            set;
        }
    
        public virtual string directory
        {
            get;
            set;
        }
    
        public virtual int quality
        {
            get;
            set;
        }
    
        public virtual int keepMethod
        {
            get;
            set;
        }
    
        public virtual System.DateTime keepDate
        {
            get;
            set;
        }
    
        public virtual int preRecordInterval
        {
            get;
            set;
        }
    
        public virtual int postRecordInterval
        {
            get;
            set;
        }
    
        public virtual System.DateTime canceled
        {
            get;
            set;
        }
    
        public virtual int recommendedCard
        {
            get;
            set;
        }
    
        public virtual bool series
        {
            get;
            set;
        }
    
        public virtual Nullable<int> idParentSchedule
        {
            get { return _idParentSchedule; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_idParentSchedule != value)
                    {
                        if (ParentSchedule != null && ParentSchedule.id_Schedule != value)
                        {
                            ParentSchedule = null;
                        }
                        _idParentSchedule = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _idParentSchedule;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Recording> Recordings
        {
            get
            {
                if (_recordings == null)
                {
                    var newCollection = new FixupCollection<Recording>();
                    newCollection.CollectionChanged += FixupRecordings;
                    _recordings = newCollection;
                }
                return _recordings;
            }
            set
            {
                if (!ReferenceEquals(_recordings, value))
                {
                    var previousValue = _recordings as FixupCollection<Recording>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRecordings;
                    }
                    _recordings = value;
                    var newValue = value as FixupCollection<Recording>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRecordings;
                    }
                }
            }
        }
        private ICollection<Recording> _recordings;
    
        public virtual Channel Channel
        {
            get { return _channel; }
            set
            {
                if (!ReferenceEquals(_channel, value))
                {
                    var previousValue = _channel;
                    _channel = value;
                    FixupChannel(previousValue);
                }
            }
        }
        private Channel _channel;
    
        public virtual ICollection<Schedule> Schedules
        {
            get
            {
                if (_schedules == null)
                {
                    var newCollection = new FixupCollection<Schedule>();
                    newCollection.CollectionChanged += FixupSchedules;
                    _schedules = newCollection;
                }
                return _schedules;
            }
            set
            {
                if (!ReferenceEquals(_schedules, value))
                {
                    var previousValue = _schedules as FixupCollection<Schedule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSchedules;
                    }
                    _schedules = value;
                    var newValue = value as FixupCollection<Schedule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSchedules;
                    }
                }
            }
        }
        private ICollection<Schedule> _schedules;
    
        public virtual Schedule ParentSchedule
        {
            get { return _parentSchedule; }
            set
            {
                if (!ReferenceEquals(_parentSchedule, value))
                {
                    var previousValue = _parentSchedule;
                    _parentSchedule = value;
                    FixupParentSchedule(previousValue);
                }
            }
        }
        private Schedule _parentSchedule;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupChannel(Channel previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (Channel != null)
            {
                if (!Channel.Schedules.Contains(this))
                {
                    Channel.Schedules.Add(this);
                }
                if (idChannel != Channel.idChannel)
                {
                    idChannel = Channel.idChannel;
                }
            }
        }
    
        private void FixupParentSchedule(Schedule previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (ParentSchedule != null)
            {
                if (!ParentSchedule.Schedules.Contains(this))
                {
                    ParentSchedule.Schedules.Add(this);
                }
                if (idParentSchedule != ParentSchedule.id_Schedule)
                {
                    idParentSchedule = ParentSchedule.id_Schedule;
                }
            }
            else if (!_settingFK)
            {
                idParentSchedule = null;
            }
        }
    
        private void FixupRecordings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Recording item in e.NewItems)
                {
                    item.Schedule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Recording item in e.OldItems)
                {
                    if (ReferenceEquals(item.Schedule, this))
                    {
                        item.Schedule = null;
                    }
                }
            }
        }
    
        private void FixupSchedules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Schedule item in e.NewItems)
                {
                    item.ParentSchedule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Schedule item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentSchedule, this))
                    {
                        item.ParentSchedule = null;
                    }
                }
            }
        }

        #endregion
    }
}
