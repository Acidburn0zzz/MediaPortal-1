<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAe
        BgAAAk1TRnQBSQFMAwEBAAE0AQABNAEAARABAAEQAQAE/wEhAQAI/wFCAU0BNgcAATYDAAEoAwABQAMA
        ARADAAEBAQABIAYAARAuAAGBAi8B/wGBAi8B/wGBAi8B/wGBAi8B/wGBAi8B/wGBAi8B/+gAAWICmQH/
        AS8CzAH/AS8CzAH/AS8CzAH/AS8CzAH/AS8CYgH/zAABmQIvAf8BmQIvAf8BmQIvAf8BmQIvAf8BmQIv
        Af8BmQIvAf8BmQIvAf8BYgLMAf8BLwP/AS8D/wEvA/8BLwP/AS8CYgH/AZkCLwH/AZkCLwH/xAADgQH/
        A4EB/wOBAf8DgQH/A4EB/wOBAf8DgQH/A4YB/wGBApkB/wGBApkB/wGBApkB/wGBApkB/wOBAf8DgQH/
        A0UB/8QAA4YB/wEvAYEBLwH/AS8BgQEvAf8BgQIvAf8BLwGBAS8B/wJiAS8B/wEvAYEBLwH/AYEBYgEv
        Af8BLwGBAS8B/wEvAmIB/wEvAYEBLwH/AS8BgQFiAf8BLwJiAf8BLwGBAS8B/wMvAf/EAAOGAf8BLwGB
        AS8B/wGBAi8B/wNxAf8BYgGBAS8B/wOBAf8BLwFiAS8B/wGBAWIBLwH/AS8BgQEvAf8BLwFiAS8B/wEv
        AWIBLwH/AS8BYgEvAf8BLwFiAS8B/wEvAYEBLwH/Ay8B/wFiAi8B/8AAA4YB/wEvAYEBLwH/A90B/wGZ
        Ai8B/wFiAZkBYgH/AcwCLwH/AS8BYgEvAf8BgQFiAS8B/wEvAYEBLwH/AZkCYgH/A2IB/wGZAWIBLwH/
        A4EB/wEvAYEBLwH/Ay8B/wMvAf/AAAOGAf8BLwGBAS8B/wEvAWIBLwH/AS8BYgEvAf8BLwGBAS8B/wEv
        AWIBLwH/AS8BgQEvAf8BmQFiAS8B/wGBAWIBLwH/AWIBgQEvAf8BYgGZAS8B/wGBAWIBLwH/AWIBgQEv
        Af8BLwGBAS8B/wMvAf8DLwH/wAADhgH/Ai8BzAH/AcwCLwH/A4EB/wFiAYEBLwH/A4EB/wEvAWIBLwH/
        AYEBYgEvAf8BLwGBAS8B/wEvAYEBLwH/AS8BgQEvAf8BLwGBAS8B/wEvAYEBLwH/AWIBgQEvAf8DLwH/
        Ay8B/8AAA4YB/wEvAYEBLwH/AZkBzAGZAf8BgQFiAS8B/wFiAZkBYgH/AZkBYgEvAf8BLwFiAS8B/wGZ
        AWIBLwH/AWIBgQEvAf8BLwGBAS8B/wNYAf8DYgH/AS8BgQEvAf8BgQFiAS8B/wMvAf8DLwH/wAADhgH/
        AS8BYgHMAf8BLwFiAS8B/wEvAWIBLwH/AS8BgQEvAf8BLwFiAS8B/wEvAWIBLwH/AZkBYgEvAf8BgQFi
        AS8B/wEvAYEBLwH/AZkCgQH/A4YB/wEvAYEBLwH/AWIBgQEvAf8DLwH/Ay8B/8AAA4YB/wEvAYEBLwH/
        AcwCYgH/A4EB/wFiAYEBLwH/AZkCgQH/AS8BYgEvAf8BgQFiAS8B/wGBAWIBLwH/AS8BgQEvAf8BzAKB
        Af8BmQKBAf8BLwGBAS8B/wGBAWIBLwH/Ay8B/wNFAf/AAAOGAf8BLwFiAZkB/wGBAZkBYgH/AWIBgQEv
        Af8BLwGBAS8B/wGZAWIBLwH/AS8BgQEvAf8BgQFiAS8B/wGBAWIBLwH/AS8BgQEvAf8BmQJiAf8BYgGB
        AS8B/wEvAYEBLwH/AYEBYgEvAf8DLwH/AZkCLwH/wAADhgH/AWIBgQEvAf8BYgGBAS8B/wFiAYEBLwH/
        AWIBgQEvAf8BmQFiAS8B/wFiAYEBLwH/AZkBYgEvAf8CgQEvAf8BYgGZAS8B/wGZAYEBLwH/AWIBgQEv
        Af8BYgGBAS8B/wFiAYEBLwH/Ay8B/8QAA4YB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZ
        AmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wGZAmIB/wNFAf//AMUAAUIBTQE+
        BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcAA/8BAAH+AQcGAAH+AQcHAAEBBwABAQcAAQFHAAEB
        BwABAQYAAv8GAAs=
</value>
  </data>
  <data name="labelTunerGroupExplanation.Text" xml:space="preserve">
    <value>Tuner groups enable TV Server to fully support multi-mode tuners. TV Server usually detects and groups related tuners automatically. However, if automatic detection fails you can use this section to create, update or delete groups as necessary.

When configured correctly there should be one group for each of your multi-mode tuners. Some cards such as the Hauppauge HVR-22*0 and Digital Devices Cine or DuoFlex C/C2/T/T2 have more than one multi-mode tuner. Ensure there is one group for each multi-mode tuner on those cards.

Examples of multi-mode tuners:
- DVB-C/C2 and DVB-T/T2, or ATSC and clear QAM ("combo")
- ATSC, clear QAM and analog, or DVB-C/C2, DVB-T/T2 and analog ("hybrid)</value>
  </data>
</root>