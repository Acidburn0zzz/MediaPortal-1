1. Open the Model.edmx file.
2. Make the required changes using the visual editor.
3. Right click in the white space and select "Properties" (ie. view the properties panel for the
   "TVDatabaseModel" object.
4. Set the "DDL Generation Template" property to "SSDLToSQL10.tt (VS)".
5. Right click anywhere in the Model.edmx visual editor and select "Generate Database From Model".
6. "Save DDL As" should be "Model.edmx.sql".
7. Click "Finish", then "Yes" and "Yes" to overwrite the DDL and SSDL/MSL.
8. Save Model.edmx.
9. Open the Model.edmx in any text or XML editor.
10. Copy the section ***BETWEEN*** (not including) <Schema ...> and </Schema> into the
    Model.MSSQL.ssdl file, replacing the existing content. Take care not to overwrite the
    <Schema ...> part because VS can generate garbage for that.
11. Repeat steps 3..10 for:
- "SSDLToMySQL.tt (VS)" and "Model.MySQL.ssdl". You may encounter an error the first time you
  attempt to click "Finish" at step 7. Cancel and try again, and the process should work second
  time.
- "???.tt" and "Model.MSSQLCE.ssdl" [Sorry, currently I don't know how to acquire the TT file.]
12. Manually apply the model changes to Model.SQLite.ssdl and Model_SQLite.edmx.sql based on their
    existing content and the content of the other SSDL files. This must be done manually because
    apparently none of the currently available EF4 SQLite providers can fully meet our needs:
    - dotConnect DevArt (https://www.devart.com/dotconnect/sqlite/) is good but commercial
    - System.Data.SQLite (https://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki) does
      not properly support EF4

    This blog (which relates to System.Data.SQLite) seems to nicely sumarise some of the issues we
    ran into (extra Int64 ID column, CreateDatabase() not supported):
    http://geekswithblogs.net/danemorgridge/archive/2010/03/30/sqlite-amp-entity-framework-4.aspx

    morpheus_xx integrated support. My understanding is that he used the dotConnect/DevArt-supplied
    TT to generate a base SSDL, then modified it manually until it worked with System.Data.SQLite.
    Because the System.Data.SQLite provider doesn't support CreateDatabase(), we have to use the
    Model_SQLite.edmx.sql file to generate an empty database for distribution. Some of these points
    are explained through this [private development team] thread:
    http://forum.team-mediaportal.com/threads/ef-how-to-modify-the-database-model-structure.127030/
13. Use GIT to check the changes in each of the SSDL files reflect the intended changes. In
    particular:
    - In all SSDL files:
      Make sure all bool/boolean columns are set as type "bit". Sorry, I don't know why this is
      necessary.
    - In "Model.MSSQLCE.ssdl" only:
      Replace all "varchar" with "nvarchar". SQL CE doesn't support non-Unicode (varchar, char)
      text:
      https://technet.microsoft.com/en-us/library/aa275635%28v=sql.80%29.aspx
      https://technet.microsoft.com/en-us/library/ms172424%28v=sql.110%29.aspx

      Based on the information linked above, it's possible that NVARCHAR columns are limited to
      either 510 or 8000 bytes (4000 characters). This implies that our current SSDL may be invalid
      (!!!).

    Revert unintended changes.
14. Right click anywhere in the Model.edmx visual editor and select "Add Code Generation Item...".
15. Select "ADO.NET Self-Tracking Entity Generator".
16. Change the name from Model1.tt (default) to Model.tt and click "Add".
17. Click OK and OK again to ignore the security warnings.
18. Open Windows explorer and navigate to TvEngine3\Mediaportal\TV\Server\TVDatabase\EntityModel.
19. Open all the new files except Model.cs in a text editor.
20. Replace all instances of "namespace Mediaportal.TV.Server.TVDatabase.EntityModel" with
    "namespace Mediaportal.TV.Server.TVDatabase.Entities".
21. Move all the new files except Model.cs from the EntityModel project folder to the Entities
    project folder. We exclude Model.cs because that [autogenerated] file has been manually changed
    (I don't know by who, or why!) and we don't want to overwrite the changes.
22. Delete Model.cs in the EntityModel project folder and any obsolete entity classes in the
    Entities project folder.
23. In Visual Studio, delete Model.tt, Model.Context.tt and all sub-items from the EntityModel
    project.
24. Update the Entities project to ensure any new entities (classes) have been included and any
    obsolete entities have been removed. This may require editing the project file in a text
	editor.
25. Update ObjectContextManager.CreateIndexes() based on foreign key changes.
26. Update ObjectContextManager.CreateDbContext() based on table changes.
27. Clean and rebuild the solution.
28. Fix all errors and rebuild.
29. Drop the current database using your preferred DB management tool.
30. Deploy TV Server (ie. copy EXEs and DLLs or whatever you do to make TV Server runnable).
31. Execute TV Server and check that it creates the database successfully.