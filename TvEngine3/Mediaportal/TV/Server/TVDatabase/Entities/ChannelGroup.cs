//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GroupMap))]
    [KnownType(typeof(KeywordMap))]
    public partial class ChannelGroup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdGroup
        {
            get { return _idGroup; }
            set
            {
                if (_idGroup != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdGroup'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idGroup = value;
                    OnPropertyChanged("IdGroup");
                }
            }
        }
        private int _idGroup;
    
        [DataMember]
        public string GroupName
        {
            get { return _groupName; }
            set
            {
                if (_groupName != value)
                {
                    _groupName = value;
                    OnPropertyChanged("GroupName");
                }
            }
        }
        private string _groupName;
    
        [DataMember]
        public int SortOrder
        {
            get { return _sortOrder; }
            set
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value;
                    OnPropertyChanged("SortOrder");
                }
            }
        }
        private int _sortOrder;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public TrackableCollection<GroupMap> GroupMaps
        {
            get
            {
                if (_groupMaps == null)
                {
                    _groupMaps = new TrackableCollection<GroupMap>();
                    _groupMaps.CollectionChanged += FixupGroupMaps;
                }
                return _groupMaps;
            }
            set
            {
                if (!ReferenceEquals(_groupMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_groupMaps != null)
                    {
                        _groupMaps.CollectionChanged -= FixupGroupMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (GroupMap item in _groupMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _groupMaps = value;
                    if (_groupMaps != null)
                    {
                        _groupMaps.CollectionChanged += FixupGroupMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (GroupMap item in _groupMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("GroupMaps");
                }
            }
        }
        private TrackableCollection<GroupMap> _groupMaps;
    
        [DataMember]
        public TrackableCollection<KeywordMap> KeywordMap
        {
            get
            {
                if (_keywordMap == null)
                {
                    _keywordMap = new TrackableCollection<KeywordMap>();
                    _keywordMap.CollectionChanged += FixupKeywordMap;
                }
                return _keywordMap;
            }
            set
            {
                if (!ReferenceEquals(_keywordMap, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_keywordMap != null)
                    {
                        _keywordMap.CollectionChanged -= FixupKeywordMap;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (KeywordMap item in _keywordMap)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _keywordMap = value;
                    if (_keywordMap != null)
                    {
                        _keywordMap.CollectionChanged += FixupKeywordMap;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (KeywordMap item in _keywordMap)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("KeywordMap");
                }
            }
        }
        private TrackableCollection<KeywordMap> _keywordMap;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GroupMaps.Clear();
            KeywordMap.Clear();
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupGroupMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GroupMap item in e.NewItems)
                {
                    item.ChannelGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GroupMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChannelGroup, this))
                    {
                        item.ChannelGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GroupMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupKeywordMap(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KeywordMap item in e.NewItems)
                {
                    item.ChannelGroups = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KeywordMap", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KeywordMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChannelGroups, this))
                    {
                        item.ChannelGroups = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KeywordMap", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
