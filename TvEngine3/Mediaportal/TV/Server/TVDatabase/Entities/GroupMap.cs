//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ChannelGroup))]
    [KnownType(typeof(Channel))]
    public partial class GroupMap: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdMap
        {
            get { return _idMap; }
            set
            {
                if (_idMap != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdMap'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idMap = value;
                    OnPropertyChanged("IdMap");
                }
            }
        }
        private int _idMap;
    
        [DataMember]
        public int IdGroup
        {
            get { return _idGroup; }
            set
            {
                if (_idGroup != value)
                {
                    ChangeTracker.RecordOriginalValue("IdGroup", _idGroup);
                    if (!IsDeserializing)
                    {
                        if (ChannelGroup != null && ChannelGroup.IdGroup != value)
                        {
                            ChannelGroup = null;
                        }
                    }
                    _idGroup = value;
                    OnPropertyChanged("IdGroup");
                }
            }
        }
        private int _idGroup;
    
        [DataMember]
        public int IdChannel
        {
            get { return _idChannel; }
            set
            {
                if (_idChannel != value)
                {
                    ChangeTracker.RecordOriginalValue("IdChannel", _idChannel);
                    if (!IsDeserializing)
                    {
                        if (Channel != null && Channel.IdChannel != value)
                        {
                            Channel = null;
                        }
                    }
                    _idChannel = value;
                    OnPropertyChanged("IdChannel");
                }
            }
        }
        private int _idChannel;
    
        [DataMember]
        public int SortOrder
        {
            get { return _sortOrder; }
            set
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value;
                    OnPropertyChanged("SortOrder");
                }
            }
        }
        private int _sortOrder;
    
        [DataMember]
        public int MediaType
        {
            get { return _mediaType; }
            set
            {
                if (_mediaType != value)
                {
                    _mediaType = value;
                    OnPropertyChanged("MediaType");
                }
            }
        }
        private int _mediaType;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public ChannelGroup ChannelGroup
        {
            get { return _channelGroup; }
            set
            {
                if (!ReferenceEquals(_channelGroup, value))
                {
                    var previousValue = _channelGroup;
                    _channelGroup = value;
                    FixupChannelGroup(previousValue);
                    OnNavigationPropertyChanged("ChannelGroup");
                }
            }
        }
        private ChannelGroup _channelGroup;
    
        [DataMember]
        public Channel Channel
        {
            get { return _channel; }
            set
            {
                if (!ReferenceEquals(_channel, value))
                {
                    var previousValue = _channel;
                    _channel = value;
                    FixupChannel(previousValue);
                    OnNavigationPropertyChanged("Channel");
                }
            }
        }
        private Channel _channel;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Dieser EntitÃ¤tstyp ist das abhÃ¤ngige Ende in mindestens einer Zuordnung, die Löschweitergaben durchführt.
        // Dieser Ereignishandler verarbeitet Benachrichtigungen, die beim Löschen des Prinzipalendes ausgelöst werden.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ChannelGroup = null;
            Channel = null;
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupChannelGroup(ChannelGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GroupMaps.Contains(this))
            {
                previousValue.GroupMaps.Remove(this);
            }
    
            if (ChannelGroup != null)
            {
                if (!ChannelGroup.GroupMaps.Contains(this))
                {
                    ChannelGroup.GroupMaps.Add(this);
                }
    
                IdGroup = ChannelGroup.IdGroup;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ChannelGroup")
                    && (ChangeTracker.OriginalValues["ChannelGroup"] == ChannelGroup))
                {
                    ChangeTracker.OriginalValues.Remove("ChannelGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ChannelGroup", previousValue);
                }
                if (ChannelGroup != null && !ChannelGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    ChannelGroup.StartTracking();
                }
            }
        }
    
        private void FixupChannel(Channel previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.GroupMaps.Contains(this))
            {
                previousValue.GroupMaps.Remove(this);
            }
    
            if (Channel != null)
            {
                if (!Channel.GroupMaps.Contains(this))
                {
                    Channel.GroupMaps.Add(this);
                }
    
                IdChannel = Channel.IdChannel;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Channel")
                    && (ChangeTracker.OriginalValues["Channel"] == Channel))
                {
                    ChangeTracker.OriginalValues.Remove("Channel");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Channel", previousValue);
                }
                if (Channel != null && !Channel.ChangeTracker.ChangeTrackingEnabled)
                {
                    Channel.StartTracking();
                }
            }
        }

        #endregion
    }
}
