//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Program))]
    public partial class ProgramCredit: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdProgramCredit
        {
            get { return _idProgramCredit; }
            set
            {
                if (_idProgramCredit != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdProgramCredit'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idProgramCredit = value;
                    OnPropertyChanged("IdProgramCredit");
                }
            }
        }
        private int _idProgramCredit;
    
        [DataMember]
        public int IdProgram
        {
            get { return _idProgram; }
            set
            {
                if (_idProgram != value)
                {
                    ChangeTracker.RecordOriginalValue("IdProgram", _idProgram);
                    if (!IsDeserializing)
                    {
                        if (Program != null && Program.IdProgram != value)
                        {
                            Program = null;
                        }
                    }
                    _idProgram = value;
                    OnPropertyChanged("IdProgram");
                }
            }
        }
        private int _idProgram;
    
        [DataMember]
        public string Person
        {
            get { return _person; }
            set
            {
                if (_person != value)
                {
                    _person = value;
                    OnPropertyChanged("Person");
                }
            }
        }
        private string _person;
    
        [DataMember]
        public string Role
        {
            get { return _role; }
            set
            {
                if (_role != value)
                {
                    _role = value;
                    OnPropertyChanged("Role");
                }
            }
        }
        private string _role;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public Program Program
        {
            get { return _program; }
            set
            {
                if (!ReferenceEquals(_program, value))
                {
                    var previousValue = _program;
                    _program = value;
                    FixupProgram(previousValue);
                    OnNavigationPropertyChanged("Program");
                }
            }
        }
        private Program _program;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Dieser EntitÃ¤tstyp ist das abhÃ¤ngige Ende in mindestens einer Zuordnung, die Löschweitergaben durchführt.
        // Dieser Ereignishandler verarbeitet Benachrichtigungen, die beim Löschen des Prinzipalendes ausgelöst werden.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Program = null;
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupProgram(Program previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProgramCredits.Contains(this))
            {
                previousValue.ProgramCredits.Remove(this);
            }
    
            if (Program != null)
            {
                if (!Program.ProgramCredits.Contains(this))
                {
                    Program.ProgramCredits.Add(this);
                }
    
                IdProgram = Program.IdProgram;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Program")
                    && (ChangeTracker.OriginalValues["Program"] == Program))
                {
                    ChangeTracker.OriginalValues.Remove("Program");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Program", previousValue);
                }
                if (Program != null && !Program.ChangeTracker.ChangeTrackingEnabled)
                {
                    Program.StartTracking();
                }
            }
        }

        #endregion
    }
}
