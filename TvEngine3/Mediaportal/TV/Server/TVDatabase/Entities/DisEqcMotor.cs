//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Card))]
    [KnownType(typeof(Satellite))]
    public partial class DisEqcMotor: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdDiSEqCMotor
        {
            get { return _idDiSEqCMotor; }
            set
            {
                if (_idDiSEqCMotor != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdDiSEqCMotor'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idDiSEqCMotor = value;
                    OnPropertyChanged("IdDiSEqCMotor");
                }
            }
        }
        private int _idDiSEqCMotor;
    
        [DataMember]
        public int IdCard
        {
            get { return _idCard; }
            set
            {
                if (_idCard != value)
                {
                    ChangeTracker.RecordOriginalValue("IdCard", _idCard);
                    if (!IsDeserializing)
                    {
                        if (Card != null && Card.IdCard != value)
                        {
                            Card = null;
                        }
                    }
                    _idCard = value;
                    OnPropertyChanged("IdCard");
                }
            }
        }
        private int _idCard;
    
        [DataMember]
        public int IdSatellite
        {
            get { return _idSatellite; }
            set
            {
                if (_idSatellite != value)
                {
                    ChangeTracker.RecordOriginalValue("IdSatellite", _idSatellite);
                    if (!IsDeserializing)
                    {
                        if (Satellite != null && Satellite.IdSatellite != value)
                        {
                            Satellite = null;
                        }
                    }
                    _idSatellite = value;
                    OnPropertyChanged("IdSatellite");
                }
            }
        }
        private int _idSatellite;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public Card Card
        {
            get { return _card; }
            set
            {
                if (!ReferenceEquals(_card, value))
                {
                    var previousValue = _card;
                    _card = value;
                    FixupCard(previousValue);
                    OnNavigationPropertyChanged("Card");
                }
            }
        }
        private Card _card;
    
        [DataMember]
        public Satellite Satellite
        {
            get { return _satellite; }
            set
            {
                if (!ReferenceEquals(_satellite, value))
                {
                    var previousValue = _satellite;
                    _satellite = value;
                    FixupSatellite(previousValue);
                    OnNavigationPropertyChanged("Satellite");
                }
            }
        }
        private Satellite _satellite;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Dieser EntitÃ¤tstyp ist das abhÃ¤ngige Ende in mindestens einer Zuordnung, die Löschweitergaben durchführt.
        // Dieser Ereignishandler verarbeitet Benachrichtigungen, die beim Löschen des Prinzipalendes ausgelöst werden.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Card = null;
            Satellite = null;
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupCard(Card previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DisEqcMotors.Contains(this))
            {
                previousValue.DisEqcMotors.Remove(this);
            }
    
            if (Card != null)
            {
                if (!Card.DisEqcMotors.Contains(this))
                {
                    Card.DisEqcMotors.Add(this);
                }
    
                IdCard = Card.IdCard;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Card")
                    && (ChangeTracker.OriginalValues["Card"] == Card))
                {
                    ChangeTracker.OriginalValues.Remove("Card");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Card", previousValue);
                }
                if (Card != null && !Card.ChangeTracker.ChangeTrackingEnabled)
                {
                    Card.StartTracking();
                }
            }
        }
    
        private void FixupSatellite(Satellite previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DisEqcMotors.Contains(this))
            {
                previousValue.DisEqcMotors.Remove(this);
            }
    
            if (Satellite != null)
            {
                if (!Satellite.DisEqcMotors.Contains(this))
                {
                    Satellite.DisEqcMotors.Add(this);
                }
    
                IdSatellite = Satellite.IdSatellite;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Satellite")
                    && (ChangeTracker.OriginalValues["Satellite"] == Satellite))
                {
                    ChangeTracker.OriginalValues.Remove("Satellite");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Satellite", previousValue);
                }
                if (Satellite != null && !Satellite.ChangeTracker.ChangeTrackingEnabled)
                {
                    Satellite.StartTracking();
                }
            }
        }

        #endregion
    }
}
