//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ServiceMpeg2))]
    [KnownType(typeof(ServiceAtsc))]
    [KnownType(typeof(ServiceDvb))]
    [KnownType(typeof(TuningDetail))]
    [KnownType(typeof(Channel))]
    public abstract partial class ServiceDetail: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdServiceDetail
        {
            get { return _idServiceDetail; }
            set
            {
                if (_idServiceDetail != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdServiceDetail' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idServiceDetail = value;
                    OnPropertyChanged("IdServiceDetail");
                }
            }
        }
        private int _idServiceDetail;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> LogicalChannelNumber
        {
            get { return _logicalChannelNumber; }
            set
            {
                if (_logicalChannelNumber != value)
                {
                    _logicalChannelNumber = value;
                    OnPropertyChanged("LogicalChannelNumber");
                }
            }
        }
        private Nullable<int> _logicalChannelNumber;
    
        [DataMember]
        public Nullable<int> EncryptionScheme
        {
            get { return _encryptionScheme; }
            set
            {
                if (_encryptionScheme != value)
                {
                    _encryptionScheme = value;
                    OnPropertyChanged("EncryptionScheme");
                }
            }
        }
        private Nullable<int> _encryptionScheme;
    
        [DataMember]
        public int MediaType
        {
            get { return _mediaType; }
            set
            {
                if (_mediaType != value)
                {
                    _mediaType = value;
                    OnPropertyChanged("MediaType");
                }
            }
        }
        private int _mediaType;
    
        [DataMember]
        public int IdChannel
        {
            get { return _idChannel; }
            set
            {
                if (_idChannel != value)
                {
                    ChangeTracker.RecordOriginalValue("IdChannel", _idChannel);
                    if (!IsDeserializing)
                    {
                        if (Channel != null && Channel.IdChannel != value)
                        {
                            Channel = null;
                        }
                    }
                    _idChannel = value;
                    OnPropertyChanged("IdChannel");
                }
            }
        }
        private int _idChannel;
    
        [DataMember]
        public int IdTuningDetail
        {
            get { return _idTuningDetail; }
            set
            {
                if (_idTuningDetail != value)
                {
                    ChangeTracker.RecordOriginalValue("IdTuningDetail", _idTuningDetail);
                    if (!IsDeserializing)
                    {
                        if (TuningDetail != null && TuningDetail.IdTuningDetail != value)
                        {
                            TuningDetail = null;
                        }
                    }
                    _idTuningDetail = value;
                    OnPropertyChanged("IdTuningDetail");
                }
            }
        }
        private int _idTuningDetail;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TuningDetail TuningDetail
        {
            get { return _tuningDetail; }
            set
            {
                if (!ReferenceEquals(_tuningDetail, value))
                {
                    var previousValue = _tuningDetail;
                    _tuningDetail = value;
                    FixupTuningDetail(previousValue);
                    OnNavigationPropertyChanged("TuningDetail");
                }
            }
        }
        private TuningDetail _tuningDetail;
    
        [DataMember]
        public Channel Channel
        {
            get { return _channel; }
            set
            {
                if (!ReferenceEquals(_channel, value))
                {
                    var previousValue = _channel;
                    _channel = value;
                    FixupChannel(previousValue);
                    OnNavigationPropertyChanged("Channel");
                }
            }
        }
        private Channel _channel;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TuningDetail = null;
            Channel = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTuningDetail(TuningDetail previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ServiceDetails.Contains(this))
            {
                previousValue.ServiceDetails.Remove(this);
            }
    
            if (TuningDetail != null)
            {
                if (!TuningDetail.ServiceDetails.Contains(this))
                {
                    TuningDetail.ServiceDetails.Add(this);
                }
    
                IdTuningDetail = TuningDetail.IdTuningDetail;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TuningDetail")
                    && (ChangeTracker.OriginalValues["TuningDetail"] == TuningDetail))
                {
                    ChangeTracker.OriginalValues.Remove("TuningDetail");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TuningDetail", previousValue);
                }
                if (TuningDetail != null && !TuningDetail.ChangeTracker.ChangeTrackingEnabled)
                {
                    TuningDetail.StartTracking();
                }
            }
        }
    
        private void FixupChannel(Channel previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ServiceDetails.Contains(this))
            {
                previousValue.ServiceDetails.Remove(this);
            }
    
            if (Channel != null)
            {
                if (!Channel.ServiceDetails.Contains(this))
                {
                    Channel.ServiceDetails.Add(this);
                }
    
                IdChannel = Channel.IdChannel;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Channel")
                    && (ChangeTracker.OriginalValues["Channel"] == Channel))
                {
                    ChangeTracker.OriginalValues.Remove("Channel");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Channel", previousValue);
                }
                if (Channel != null && !Channel.ChangeTracker.ChangeTrackingEnabled)
                {
                    Channel.StartTracking();
                }
            }
        }

        #endregion
    }
}
