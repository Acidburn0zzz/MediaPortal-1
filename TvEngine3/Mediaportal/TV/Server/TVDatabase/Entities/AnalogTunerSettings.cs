//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Tuner))]
    [KnownType(typeof(VideoEncoder))]
    [KnownType(typeof(AudioEncoder))]
    public partial class AnalogTunerSettings: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdAnalogTunerSettings
        {
            get { return _idAnalogTunerSettings; }
            set
            {
                if (_idAnalogTunerSettings != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdAnalogTunerSettings' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Tuner != null && Tuner.IdTuner != value)
                        {
                            Tuner = null;
                        }
                    }
                    _idAnalogTunerSettings = value;
                    OnPropertyChanged("IdAnalogTunerSettings");
                }
            }
        }
        private int _idAnalogTunerSettings;
    
        [DataMember]
        public int VideoStandard
        {
            get { return _videoStandard; }
            set
            {
                if (_videoStandard != value)
                {
                    _videoStandard = value;
                    OnPropertyChanged("VideoStandard");
                }
            }
        }
        private int _videoStandard;
    
        [DataMember]
        public int SupportedVideoStandards
        {
            get { return _supportedVideoStandards; }
            set
            {
                if (_supportedVideoStandards != value)
                {
                    _supportedVideoStandards = value;
                    OnPropertyChanged("SupportedVideoStandards");
                }
            }
        }
        private int _supportedVideoStandards;
    
        [DataMember]
        public int FrameSize
        {
            get { return _frameSize; }
            set
            {
                if (_frameSize != value)
                {
                    _frameSize = value;
                    OnPropertyChanged("FrameSize");
                }
            }
        }
        private int _frameSize;
    
        [DataMember]
        public int SupportedFrameSizes
        {
            get { return _supportedFrameSizes; }
            set
            {
                if (_supportedFrameSizes != value)
                {
                    _supportedFrameSizes = value;
                    OnPropertyChanged("SupportedFrameSizes");
                }
            }
        }
        private int _supportedFrameSizes;
    
        [DataMember]
        public int FrameRate
        {
            get { return _frameRate; }
            set
            {
                if (_frameRate != value)
                {
                    _frameRate = value;
                    OnPropertyChanged("FrameRate");
                }
            }
        }
        private int _frameRate;
    
        [DataMember]
        public int SupportedFrameRates
        {
            get { return _supportedFrameRates; }
            set
            {
                if (_supportedFrameRates != value)
                {
                    _supportedFrameRates = value;
                    OnPropertyChanged("SupportedFrameRates");
                }
            }
        }
        private int _supportedFrameRates;
    
        [DataMember]
        public Nullable<int> IdVideoEncoder
        {
            get { return _idVideoEncoder; }
            set
            {
                if (_idVideoEncoder != value)
                {
                    ChangeTracker.RecordOriginalValue("IdVideoEncoder", _idVideoEncoder);
                    if (!IsDeserializing)
                    {
                        if (VideoEncoder != null && VideoEncoder.IdVideoEncoder != value)
                        {
                            VideoEncoder = null;
                        }
                    }
                    _idVideoEncoder = value;
                    OnPropertyChanged("IdVideoEncoder");
                }
            }
        }
        private Nullable<int> _idVideoEncoder;
    
        [DataMember]
        public Nullable<int> IdAudioEncoder
        {
            get { return _idAudioEncoder; }
            set
            {
                if (_idAudioEncoder != value)
                {
                    ChangeTracker.RecordOriginalValue("IdAudioEncoder", _idAudioEncoder);
                    if (!IsDeserializing)
                    {
                        if (AudioEncoder != null && AudioEncoder.IdAudioEncoder != value)
                        {
                            AudioEncoder = null;
                        }
                    }
                    _idAudioEncoder = value;
                    OnPropertyChanged("IdAudioEncoder");
                }
            }
        }
        private Nullable<int> _idAudioEncoder;
    
        [DataMember]
        public int EncoderBitRateModeTimeShifting
        {
            get { return _encoderBitRateModeTimeShifting; }
            set
            {
                if (_encoderBitRateModeTimeShifting != value)
                {
                    _encoderBitRateModeTimeShifting = value;
                    OnPropertyChanged("EncoderBitRateModeTimeShifting");
                }
            }
        }
        private int _encoderBitRateModeTimeShifting;
    
        [DataMember]
        public int EncoderBitRateTimeShifting
        {
            get { return _encoderBitRateTimeShifting; }
            set
            {
                if (_encoderBitRateTimeShifting != value)
                {
                    _encoderBitRateTimeShifting = value;
                    OnPropertyChanged("EncoderBitRateTimeShifting");
                }
            }
        }
        private int _encoderBitRateTimeShifting;
    
        [DataMember]
        public int EncoderBitRatePeakTimeShifting
        {
            get { return _encoderBitRatePeakTimeShifting; }
            set
            {
                if (_encoderBitRatePeakTimeShifting != value)
                {
                    _encoderBitRatePeakTimeShifting = value;
                    OnPropertyChanged("EncoderBitRatePeakTimeShifting");
                }
            }
        }
        private int _encoderBitRatePeakTimeShifting;
    
        [DataMember]
        public int EncoderBitRateModeRecording
        {
            get { return _encoderBitRateModeRecording; }
            set
            {
                if (_encoderBitRateModeRecording != value)
                {
                    _encoderBitRateModeRecording = value;
                    OnPropertyChanged("EncoderBitRateModeRecording");
                }
            }
        }
        private int _encoderBitRateModeRecording;
    
        [DataMember]
        public int EncoderBitRateRecording
        {
            get { return _encoderBitRateRecording; }
            set
            {
                if (_encoderBitRateRecording != value)
                {
                    _encoderBitRateRecording = value;
                    OnPropertyChanged("EncoderBitRateRecording");
                }
            }
        }
        private int _encoderBitRateRecording;
    
        [DataMember]
        public int EncoderBitRatePeakRecording
        {
            get { return _encoderBitRatePeakRecording; }
            set
            {
                if (_encoderBitRatePeakRecording != value)
                {
                    _encoderBitRatePeakRecording = value;
                    OnPropertyChanged("EncoderBitRatePeakRecording");
                }
            }
        }
        private int _encoderBitRatePeakRecording;
    
        [DataMember]
        public int ExternalInputSourceVideo
        {
            get { return _externalInputSourceVideo; }
            set
            {
                if (_externalInputSourceVideo != value)
                {
                    _externalInputSourceVideo = value;
                    OnPropertyChanged("ExternalInputSourceVideo");
                }
            }
        }
        private int _externalInputSourceVideo;
    
        [DataMember]
        public int ExternalInputSourceAudio
        {
            get { return _externalInputSourceAudio; }
            set
            {
                if (_externalInputSourceAudio != value)
                {
                    _externalInputSourceAudio = value;
                    OnPropertyChanged("ExternalInputSourceAudio");
                }
            }
        }
        private int _externalInputSourceAudio;
    
        [DataMember]
        public int ExternalInputCountryId
        {
            get { return _externalInputCountryId; }
            set
            {
                if (_externalInputCountryId != value)
                {
                    _externalInputCountryId = value;
                    OnPropertyChanged("ExternalInputCountryId");
                }
            }
        }
        private int _externalInputCountryId;
    
        [DataMember]
        public int ExternalInputPhysicalChannelNumber
        {
            get { return _externalInputPhysicalChannelNumber; }
            set
            {
                if (_externalInputPhysicalChannelNumber != value)
                {
                    _externalInputPhysicalChannelNumber = value;
                    OnPropertyChanged("ExternalInputPhysicalChannelNumber");
                }
            }
        }
        private int _externalInputPhysicalChannelNumber;
    
        [DataMember]
        public string ExternalTunerProgram
        {
            get { return _externalTunerProgram; }
            set
            {
                if (_externalTunerProgram != value)
                {
                    _externalTunerProgram = value;
                    OnPropertyChanged("ExternalTunerProgram");
                }
            }
        }
        private string _externalTunerProgram;
    
        [DataMember]
        public string ExternalTunerProgramArguments
        {
            get { return _externalTunerProgramArguments; }
            set
            {
                if (_externalTunerProgramArguments != value)
                {
                    _externalTunerProgramArguments = value;
                    OnPropertyChanged("ExternalTunerProgramArguments");
                }
            }
        }
        private string _externalTunerProgramArguments;
    
        [DataMember]
        public int SupportedVideoSources
        {
            get { return _supportedVideoSources; }
            set
            {
                if (_supportedVideoSources != value)
                {
                    _supportedVideoSources = value;
                    OnPropertyChanged("SupportedVideoSources");
                }
            }
        }
        private int _supportedVideoSources;
    
        [DataMember]
        public int SupportedAudioSources
        {
            get { return _supportedAudioSources; }
            set
            {
                if (_supportedAudioSources != value)
                {
                    _supportedAudioSources = value;
                    OnPropertyChanged("SupportedAudioSources");
                }
            }
        }
        private int _supportedAudioSources;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Tuner Tuner
        {
            get { return _tuner; }
            set
            {
                if (!ReferenceEquals(_tuner, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (IdAnalogTunerSettings != value.IdTuner)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _tuner;
                    _tuner = value;
                    FixupTuner(previousValue);
                    OnNavigationPropertyChanged("Tuner");
                }
            }
        }
        private Tuner _tuner;
    
        [DataMember]
        public VideoEncoder VideoEncoder
        {
            get { return _videoEncoder; }
            set
            {
                if (!ReferenceEquals(_videoEncoder, value))
                {
                    var previousValue = _videoEncoder;
                    _videoEncoder = value;
                    FixupVideoEncoder(previousValue);
                    OnNavigationPropertyChanged("VideoEncoder");
                }
            }
        }
        private VideoEncoder _videoEncoder;
    
        [DataMember]
        public AudioEncoder AudioEncoder
        {
            get { return _audioEncoder; }
            set
            {
                if (!ReferenceEquals(_audioEncoder, value))
                {
                    var previousValue = _audioEncoder;
                    _audioEncoder = value;
                    FixupAudioEncoder(previousValue);
                    OnNavigationPropertyChanged("AudioEncoder");
                }
            }
        }
        private AudioEncoder _audioEncoder;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Tuner = null;
            VideoEncoder = null;
            AudioEncoder = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTuner(Tuner previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.AnalogTunerSettings, this))
            {
                previousValue.AnalogTunerSettings = null;
            }
    
            if (Tuner != null)
            {
                Tuner.AnalogTunerSettings = this;
                IdAnalogTunerSettings = Tuner.IdTuner;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tuner")
                    && (ChangeTracker.OriginalValues["Tuner"] == Tuner))
                {
                    ChangeTracker.OriginalValues.Remove("Tuner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tuner", previousValue);
                }
                if (Tuner != null && !Tuner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tuner.StartTracking();
                }
            }
        }
    
        private void FixupVideoEncoder(VideoEncoder previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnalogTunerSettings.Contains(this))
            {
                previousValue.AnalogTunerSettings.Remove(this);
            }
    
            if (VideoEncoder != null)
            {
                if (!VideoEncoder.AnalogTunerSettings.Contains(this))
                {
                    VideoEncoder.AnalogTunerSettings.Add(this);
                }
    
                IdVideoEncoder = VideoEncoder.IdVideoEncoder;
            }
            else if (!skipKeys)
            {
                IdVideoEncoder = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("VideoEncoder")
                    && (ChangeTracker.OriginalValues["VideoEncoder"] == VideoEncoder))
                {
                    ChangeTracker.OriginalValues.Remove("VideoEncoder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("VideoEncoder", previousValue);
                }
                if (VideoEncoder != null && !VideoEncoder.ChangeTracker.ChangeTrackingEnabled)
                {
                    VideoEncoder.StartTracking();
                }
            }
        }
    
        private void FixupAudioEncoder(AudioEncoder previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnalogTunerSettings.Contains(this))
            {
                previousValue.AnalogTunerSettings.Remove(this);
            }
    
            if (AudioEncoder != null)
            {
                if (!AudioEncoder.AnalogTunerSettings.Contains(this))
                {
                    AudioEncoder.AnalogTunerSettings.Add(this);
                }
    
                IdAudioEncoder = AudioEncoder.IdAudioEncoder;
            }
            else if (!skipKeys)
            {
                IdAudioEncoder = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AudioEncoder")
                    && (ChangeTracker.OriginalValues["AudioEncoder"] == AudioEncoder))
                {
                    ChangeTracker.OriginalValues.Remove("AudioEncoder");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AudioEncoder", previousValue);
                }
                if (AudioEncoder != null && !AudioEncoder.ChangeTracker.ChangeTrackingEnabled)
                {
                    AudioEncoder.StartTracking();
                }
            }
        }

        #endregion
    }
}
