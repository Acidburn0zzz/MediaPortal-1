//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TuningDetailDvbS2))]
    [KnownType(typeof(Satellite))]
    public partial class TuningDetailSatellite : TuningDetail, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> IdSatellite
        {
            get { return _idSatellite; }
            set
            {
                if (_idSatellite != value)
                {
                    ChangeTracker.RecordOriginalValue("IdSatellite", _idSatellite);
                    if (!IsDeserializing)
                    {
                        if (Satellite != null && Satellite.IdSatellite != value)
                        {
                            Satellite = null;
                        }
                    }
                    _idSatellite = value;
                    OnPropertyChanged("IdSatellite");
                }
            }
        }
        private Nullable<int> _idSatellite;
    
        [DataMember]
        public Nullable<int> Polarisation
        {
            get { return _polarisation; }
            set
            {
                if (_polarisation != value)
                {
                    _polarisation = value;
                    OnPropertyChanged("Polarisation");
                }
            }
        }
        private Nullable<int> _polarisation;
    
        [DataMember]
        public Nullable<int> Frequency
        {
            get { return _frequency; }
            set
            {
                if (_frequency != value)
                {
                    _frequency = value;
                    OnPropertyChanged("Frequency");
                }
            }
        }
        private Nullable<int> _frequency;
    
        [DataMember]
        public Nullable<int> Modulation
        {
            get { return _modulation; }
            set
            {
                if (_modulation != value)
                {
                    _modulation = value;
                    OnPropertyChanged("Modulation");
                }
            }
        }
        private Nullable<int> _modulation;
    
        [DataMember]
        public Nullable<int> SymbolRate
        {
            get { return _symbolRate; }
            set
            {
                if (_symbolRate != value)
                {
                    _symbolRate = value;
                    OnPropertyChanged("SymbolRate");
                }
            }
        }
        private Nullable<int> _symbolRate;
    
        [DataMember]
        public Nullable<int> FecRate
        {
            get { return _fecRate; }
            set
            {
                if (_fecRate != value)
                {
                    _fecRate = value;
                    OnPropertyChanged("FecRate");
                }
            }
        }
        private Nullable<int> _fecRate;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Satellite Satellite
        {
            get { return _satellite; }
            set
            {
                if (!ReferenceEquals(_satellite, value))
                {
                    var previousValue = _satellite;
                    _satellite = value;
                    FixupSatellite(previousValue);
                    OnNavigationPropertyChanged("Satellite");
                }
            }
        }
        private Satellite _satellite;

        #endregion
        #region ChangeTracking
    
        protected override void ClearNavigationProperties()
        {
            base.ClearNavigationProperties();
            Satellite = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSatellite(Satellite previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TuningDetailSatellites.Contains(this))
            {
                previousValue.TuningDetailSatellites.Remove(this);
            }
    
            if (Satellite != null)
            {
                if (!Satellite.TuningDetailSatellites.Contains(this))
                {
                    Satellite.TuningDetailSatellites.Add(this);
                }
    
                IdSatellite = Satellite.IdSatellite;
            }
            else if (!skipKeys)
            {
                IdSatellite = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Satellite")
                    && (ChangeTracker.OriginalValues["Satellite"] == Satellite))
                {
                    ChangeTracker.OriginalValues.Remove("Satellite");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Satellite", previousValue);
                }
                if (Satellite != null && !Satellite.ChangeTracker.ChangeTrackingEnabled)
                {
                    Satellite.StartTracking();
                }
            }
        }

        #endregion
    }
}
