//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GroupMap))]
    [KnownType(typeof(Recording))]
    [KnownType(typeof(Program))]
    [KnownType(typeof(ChannelMap))]
    [KnownType(typeof(Schedule))]
    [KnownType(typeof(History))]
    [KnownType(typeof(TuningDetail))]
    [KnownType(typeof(TvMovieMapping))]
    [KnownType(typeof(ChannelLinkageMap))]
    [KnownType(typeof(Conflict))]
    public partial class Channel: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdChannel
        {
            get { return _idChannel; }
            set
            {
                if (_idChannel != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdChannel'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idChannel = value;
                    OnPropertyChanged("IdChannel");
                }
            }
        }
        private int _idChannel;
    
        [DataMember]
        public int TimesWatched
        {
            get { return _timesWatched; }
            set
            {
                if (_timesWatched != value)
                {
                    _timesWatched = value;
                    OnPropertyChanged("TimesWatched");
                }
            }
        }
        private int _timesWatched;
    
        [DataMember]
        public Nullable<System.DateTime> TotalTimeWatched
        {
            get { return _totalTimeWatched; }
            set
            {
                if (_totalTimeWatched != value)
                {
                    _totalTimeWatched = value;
                    OnPropertyChanged("TotalTimeWatched");
                }
            }
        }
        private Nullable<System.DateTime> _totalTimeWatched;
    
        [DataMember]
        public bool GrabEpg
        {
            get { return _grabEpg; }
            set
            {
                if (_grabEpg != value)
                {
                    _grabEpg = value;
                    OnPropertyChanged("GrabEpg");
                }
            }
        }
        private bool _grabEpg;
    
        [DataMember]
        public Nullable<System.DateTime> LastGrabTime
        {
            get { return _lastGrabTime; }
            set
            {
                if (_lastGrabTime != value)
                {
                    _lastGrabTime = value;
                    OnPropertyChanged("LastGrabTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastGrabTime;
    
        [DataMember]
        public int SortOrder
        {
            get { return _sortOrder; }
            set
            {
                if (_sortOrder != value)
                {
                    _sortOrder = value;
                    OnPropertyChanged("SortOrder");
                }
            }
        }
        private int _sortOrder;
    
        [DataMember]
        public bool VisibleInGuide
        {
            get { return _visibleInGuide; }
            set
            {
                if (_visibleInGuide != value)
                {
                    _visibleInGuide = value;
                    OnPropertyChanged("VisibleInGuide");
                }
            }
        }
        private bool _visibleInGuide;
    
        [DataMember]
        public string ExternalId
        {
            get { return _externalId; }
            set
            {
                if (_externalId != value)
                {
                    _externalId = value;
                    OnPropertyChanged("ExternalId");
                }
            }
        }
        private string _externalId;
    
        [DataMember]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        private string _displayName;
    
        [DataMember]
        public bool EpgHasGaps
        {
            get { return _epgHasGaps; }
            set
            {
                if (_epgHasGaps != value)
                {
                    _epgHasGaps = value;
                    OnPropertyChanged("EpgHasGaps");
                }
            }
        }
        private bool _epgHasGaps;
    
        [DataMember]
        public int MediaType
        {
            get { return _mediaType; }
            set
            {
                if (_mediaType != value)
                {
                    _mediaType = value;
                    OnPropertyChanged("MediaType");
                }
            }
        }
        private int _mediaType;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public TrackableCollection<GroupMap> GroupMaps
        {
            get
            {
                if (_groupMaps == null)
                {
                    _groupMaps = new TrackableCollection<GroupMap>();
                    _groupMaps.CollectionChanged += FixupGroupMaps;
                }
                return _groupMaps;
            }
            set
            {
                if (!ReferenceEquals(_groupMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_groupMaps != null)
                    {
                        _groupMaps.CollectionChanged -= FixupGroupMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (GroupMap item in _groupMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _groupMaps = value;
                    if (_groupMaps != null)
                    {
                        _groupMaps.CollectionChanged += FixupGroupMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (GroupMap item in _groupMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("GroupMaps");
                }
            }
        }
        private TrackableCollection<GroupMap> _groupMaps;
    
        [DataMember]
        public TrackableCollection<Recording> Recordings
        {
            get
            {
                if (_recordings == null)
                {
                    _recordings = new TrackableCollection<Recording>();
                    _recordings.CollectionChanged += FixupRecordings;
                }
                return _recordings;
            }
            set
            {
                if (!ReferenceEquals(_recordings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_recordings != null)
                    {
                        _recordings.CollectionChanged -= FixupRecordings;
                    }
                    _recordings = value;
                    if (_recordings != null)
                    {
                        _recordings.CollectionChanged += FixupRecordings;
                    }
                    OnNavigationPropertyChanged("Recordings");
                }
            }
        }
        private TrackableCollection<Recording> _recordings;
    
        [DataMember]
        public TrackableCollection<Program> Programs
        {
            get
            {
                if (_programs == null)
                {
                    _programs = new TrackableCollection<Program>();
                    _programs.CollectionChanged += FixupPrograms;
                }
                return _programs;
            }
            set
            {
                if (!ReferenceEquals(_programs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_programs != null)
                    {
                        _programs.CollectionChanged -= FixupPrograms;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (Program item in _programs)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _programs = value;
                    if (_programs != null)
                    {
                        _programs.CollectionChanged += FixupPrograms;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (Program item in _programs)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Programs");
                }
            }
        }
        private TrackableCollection<Program> _programs;
    
        [DataMember]
        public TrackableCollection<ChannelMap> ChannelMaps
        {
            get
            {
                if (_channelMaps == null)
                {
                    _channelMaps = new TrackableCollection<ChannelMap>();
                    _channelMaps.CollectionChanged += FixupChannelMaps;
                }
                return _channelMaps;
            }
            set
            {
                if (!ReferenceEquals(_channelMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_channelMaps != null)
                    {
                        _channelMaps.CollectionChanged -= FixupChannelMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (ChannelMap item in _channelMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _channelMaps = value;
                    if (_channelMaps != null)
                    {
                        _channelMaps.CollectionChanged += FixupChannelMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (ChannelMap item in _channelMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ChannelMaps");
                }
            }
        }
        private TrackableCollection<ChannelMap> _channelMaps;
    
        [DataMember]
        public TrackableCollection<Schedule> Schedules
        {
            get
            {
                if (_schedules == null)
                {
                    _schedules = new TrackableCollection<Schedule>();
                    _schedules.CollectionChanged += FixupSchedules;
                }
                return _schedules;
            }
            set
            {
                if (!ReferenceEquals(_schedules, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_schedules != null)
                    {
                        _schedules.CollectionChanged -= FixupSchedules;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (Schedule item in _schedules)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _schedules = value;
                    if (_schedules != null)
                    {
                        _schedules.CollectionChanged += FixupSchedules;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (Schedule item in _schedules)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Schedules");
                }
            }
        }
        private TrackableCollection<Schedule> _schedules;
    
        [DataMember]
        public TrackableCollection<History> Histories
        {
            get
            {
                if (_histories == null)
                {
                    _histories = new TrackableCollection<History>();
                    _histories.CollectionChanged += FixupHistories;
                }
                return _histories;
            }
            set
            {
                if (!ReferenceEquals(_histories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_histories != null)
                    {
                        _histories.CollectionChanged -= FixupHistories;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (History item in _histories)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _histories = value;
                    if (_histories != null)
                    {
                        _histories.CollectionChanged += FixupHistories;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (History item in _histories)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Histories");
                }
            }
        }
        private TrackableCollection<History> _histories;
    
        [DataMember]
        public TrackableCollection<TuningDetail> TuningDetails
        {
            get
            {
                if (_tuningDetails == null)
                {
                    _tuningDetails = new TrackableCollection<TuningDetail>();
                    _tuningDetails.CollectionChanged += FixupTuningDetails;
                }
                return _tuningDetails;
            }
            set
            {
                if (!ReferenceEquals(_tuningDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_tuningDetails != null)
                    {
                        _tuningDetails.CollectionChanged -= FixupTuningDetails;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (TuningDetail item in _tuningDetails)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tuningDetails = value;
                    if (_tuningDetails != null)
                    {
                        _tuningDetails.CollectionChanged += FixupTuningDetails;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (TuningDetail item in _tuningDetails)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TuningDetails");
                }
            }
        }
        private TrackableCollection<TuningDetail> _tuningDetails;
    
        [DataMember]
        public TrackableCollection<TvMovieMapping> TvMovieMappings
        {
            get
            {
                if (_tvMovieMappings == null)
                {
                    _tvMovieMappings = new TrackableCollection<TvMovieMapping>();
                    _tvMovieMappings.CollectionChanged += FixupTvMovieMappings;
                }
                return _tvMovieMappings;
            }
            set
            {
                if (!ReferenceEquals(_tvMovieMappings, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_tvMovieMappings != null)
                    {
                        _tvMovieMappings.CollectionChanged -= FixupTvMovieMappings;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (TvMovieMapping item in _tvMovieMappings)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _tvMovieMappings = value;
                    if (_tvMovieMappings != null)
                    {
                        _tvMovieMappings.CollectionChanged += FixupTvMovieMappings;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (TvMovieMapping item in _tvMovieMappings)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("TvMovieMappings");
                }
            }
        }
        private TrackableCollection<TvMovieMapping> _tvMovieMappings;
    
        [DataMember]
        public TrackableCollection<ChannelLinkageMap> ChannelLinkMaps
        {
            get
            {
                if (_channelLinkMaps == null)
                {
                    _channelLinkMaps = new TrackableCollection<ChannelLinkageMap>();
                    _channelLinkMaps.CollectionChanged += FixupChannelLinkMaps;
                }
                return _channelLinkMaps;
            }
            set
            {
                if (!ReferenceEquals(_channelLinkMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_channelLinkMaps != null)
                    {
                        _channelLinkMaps.CollectionChanged -= FixupChannelLinkMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (ChannelLinkageMap item in _channelLinkMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _channelLinkMaps = value;
                    if (_channelLinkMaps != null)
                    {
                        _channelLinkMaps.CollectionChanged += FixupChannelLinkMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (ChannelLinkageMap item in _channelLinkMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ChannelLinkMaps");
                }
            }
        }
        private TrackableCollection<ChannelLinkageMap> _channelLinkMaps;
    
        [DataMember]
        public TrackableCollection<ChannelLinkageMap> ChannelPortalMaps
        {
            get
            {
                if (_channelPortalMaps == null)
                {
                    _channelPortalMaps = new TrackableCollection<ChannelLinkageMap>();
                    _channelPortalMaps.CollectionChanged += FixupChannelPortalMaps;
                }
                return _channelPortalMaps;
            }
            set
            {
                if (!ReferenceEquals(_channelPortalMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_channelPortalMaps != null)
                    {
                        _channelPortalMaps.CollectionChanged -= FixupChannelPortalMaps;
                    }
                    _channelPortalMaps = value;
                    if (_channelPortalMaps != null)
                    {
                        _channelPortalMaps.CollectionChanged += FixupChannelPortalMaps;
                    }
                    OnNavigationPropertyChanged("ChannelPortalMaps");
                }
            }
        }
        private TrackableCollection<ChannelLinkageMap> _channelPortalMaps;
    
        [DataMember]
        public TrackableCollection<Conflict> Conflicts
        {
            get
            {
                if (_conflicts == null)
                {
                    _conflicts = new TrackableCollection<Conflict>();
                    _conflicts.CollectionChanged += FixupConflicts;
                }
                return _conflicts;
            }
            set
            {
                if (!ReferenceEquals(_conflicts, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_conflicts != null)
                    {
                        _conflicts.CollectionChanged -= FixupConflicts;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (Conflict item in _conflicts)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _conflicts = value;
                    if (_conflicts != null)
                    {
                        _conflicts.CollectionChanged += FixupConflicts;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (Conflict item in _conflicts)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Conflicts");
                }
            }
        }
        private TrackableCollection<Conflict> _conflicts;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GroupMaps.Clear();
            Recordings.Clear();
            Programs.Clear();
            ChannelMaps.Clear();
            Schedules.Clear();
            Histories.Clear();
            TuningDetails.Clear();
            TvMovieMappings.Clear();
            ChannelLinkMaps.Clear();
            ChannelPortalMaps.Clear();
            Conflicts.Clear();
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupGroupMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GroupMap item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GroupMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GroupMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupRecordings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Recording item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Recordings", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Recording item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Recordings", item);
                    }
                }
            }
        }
    
        private void FixupPrograms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Program item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Programs", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Program item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Programs", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupChannelMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ChannelMap item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChannelMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChannelMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChannelMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupSchedules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Schedule item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Schedules", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Schedule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Schedules", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (History item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Histories", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (History item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Histories", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTuningDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TuningDetail item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TuningDetails", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TuningDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TuningDetails", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupTvMovieMappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TvMovieMapping item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TvMovieMappings", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TvMovieMapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TvMovieMappings", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupChannelLinkMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ChannelLinkageMap item in e.NewItems)
                {
                    item.ChannelLink = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChannelLinkMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChannelLinkageMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChannelLink, this))
                    {
                        item.ChannelLink = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChannelLinkMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupChannelPortalMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ChannelLinkageMap item in e.NewItems)
                {
                    item.ChannelPortal = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChannelPortalMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ChannelLinkageMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.ChannelPortal, this))
                    {
                        item.ChannelPortal = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChannelPortalMaps", item);
                    }
                }
            }
        }
    
        private void FixupConflicts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Conflict item in e.NewItems)
                {
                    item.Channel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Conflicts", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Conflict item in e.OldItems)
                {
                    if (ReferenceEquals(item.Channel, this))
                    {
                        item.Channel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Conflicts", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
