//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TunerSatellite))]
    [KnownType(typeof(TuningDetailSatellite))]
    public partial class Satellite: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdSatellite
        {
            get { return _idSatellite; }
            set
            {
                if (_idSatellite != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdSatellite' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idSatellite = value;
                    OnPropertyChanged("IdSatellite");
                }
            }
        }
        private int _idSatellite;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Position
        {
            get { return _position; }
            set
            {
                if (_position != value)
                {
                    _position = value;
                    OnPropertyChanged("Position");
                }
            }
        }
        private int _position;
    
        [DataMember]
        public string TransponderListUrl
        {
            get { return _transponderListUrl; }
            set
            {
                if (_transponderListUrl != value)
                {
                    _transponderListUrl = value;
                    OnPropertyChanged("TransponderListUrl");
                }
            }
        }
        private string _transponderListUrl;
    
        [DataMember]
        public string LocalTransponderFile
        {
            get { return _localTranspoderFile; }
            set
            {
                if (_localTranspoderFile != value)
                {
                    _localTranspoderFile = value;
                    OnPropertyChanged("LocalTranspoderFile");
                }
            }
        }
        private string _localTranspoderFile;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TunerSatellite> TunerSatellites
        {
            get
            {
                if (_tunerSatellites == null)
                {
                    _tunerSatellites = new TrackableCollection<TunerSatellite>();
                    _tunerSatellites.CollectionChanged += FixupTunerSatellites;
                }
                return _tunerSatellites;
            }
            set
            {
                if (!ReferenceEquals(_tunerSatellites, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tunerSatellites != null)
                    {
                        _tunerSatellites.CollectionChanged -= FixupTunerSatellites;
                    }
                    _tunerSatellites = value;
                    if (_tunerSatellites != null)
                    {
                        _tunerSatellites.CollectionChanged += FixupTunerSatellites;
                    }
                    OnNavigationPropertyChanged("TunerSatellites");
                }
            }
        }
        private TrackableCollection<TunerSatellite> _tunerSatellites;
    
        [DataMember]
        public TrackableCollection<TuningDetailSatellite> TuningDetailSatellites
        {
            get
            {
                if (_tuningDetailSatellites == null)
                {
                    _tuningDetailSatellites = new TrackableCollection<TuningDetailSatellite>();
                    _tuningDetailSatellites.CollectionChanged += FixupTuningDetailSatellites;
                }
                return _tuningDetailSatellites;
            }
            set
            {
                if (!ReferenceEquals(_tuningDetailSatellites, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_tuningDetailSatellites != null)
                    {
                        _tuningDetailSatellites.CollectionChanged -= FixupTuningDetailSatellites;
                    }
                    _tuningDetailSatellites = value;
                    if (_tuningDetailSatellites != null)
                    {
                        _tuningDetailSatellites.CollectionChanged += FixupTuningDetailSatellites;
                    }
                    OnNavigationPropertyChanged("TuningDetailSatellites");
                }
            }
        }
        private TrackableCollection<TuningDetailSatellite> _tuningDetailSatellites;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TunerSatellites.Clear();
            TuningDetailSatellites.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTunerSatellites(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TunerSatellite item in e.NewItems)
                {
                    item.Satellite = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TunerSatellites", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TunerSatellite item in e.OldItems)
                {
                    if (ReferenceEquals(item.Satellite, this))
                    {
                        item.Satellite = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TunerSatellites", item);
                    }
                }
            }
        }
    
        private void FixupTuningDetailSatellites(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TuningDetailSatellite item in e.NewItems)
                {
                    item.Satellite = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TuningDetailSatellites", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TuningDetailSatellite item in e.OldItems)
                {
                    if (ReferenceEquals(item.Satellite, this))
                    {
                        item.Satellite = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TuningDetailSatellites", item);
                    }
                }
            }
        }

        #endregion
    }
}
