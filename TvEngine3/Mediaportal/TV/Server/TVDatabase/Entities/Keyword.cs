//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde aus einer Vorlage generiert.
//
//     Änderungen an dieser Datei führen möglicherweise zu falschem Verhalten und gehen verloren, falls
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PersonalTVGuideMap))]
    [KnownType(typeof(KeywordMap))]
    public partial class Keyword: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Eigenschaften
    
        [DataMember]
        public int IdKeyword
        {
            get { return _idKeyword; }
            set
            {
                if (_idKeyword != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Die 'IdKeyword'-Eigenschaft ist Teil des Objektschlüssels und kann nicht geÃ¤ndert werden. Änderungen an Schlüsseleigenschaften können nur ausgeführt werden, wenn das Objekt nachverfolgt wird oder sich im Added-Zustand befindet.");
                    }
                    _idKeyword = value;
                    OnPropertyChanged("IdKeyword");
                }
            }
        }
        private int _idKeyword;
    
        [DataMember]
        public string KeywordName
        {
            get { return _keywordName; }
            set
            {
                if (_keywordName != value)
                {
                    _keywordName = value;
                    OnPropertyChanged("KeywordName");
                }
            }
        }
        private string _keywordName;
    
        [DataMember]
        public int Rating
        {
            get { return _rating; }
            set
            {
                if (_rating != value)
                {
                    _rating = value;
                    OnPropertyChanged("Rating");
                }
            }
        }
        private int _rating;
    
        [DataMember]
        public bool AutoRecord
        {
            get { return _autoRecord; }
            set
            {
                if (_autoRecord != value)
                {
                    _autoRecord = value;
                    OnPropertyChanged("AutoRecord");
                }
            }
        }
        private bool _autoRecord;
    
        [DataMember]
        public int SearchIn
        {
            get { return _searchIn; }
            set
            {
                if (_searchIn != value)
                {
                    _searchIn = value;
                    OnPropertyChanged("SearchIn");
                }
            }
        }
        private int _searchIn;

        #endregion
        #region Navigationseigenschaften
    
        [DataMember]
        public TrackableCollection<PersonalTVGuideMap> PersonalTVGuideMaps
        {
            get
            {
                if (_personalTVGuideMaps == null)
                {
                    _personalTVGuideMaps = new TrackableCollection<PersonalTVGuideMap>();
                    _personalTVGuideMaps.CollectionChanged += FixupPersonalTVGuideMaps;
                }
                return _personalTVGuideMaps;
            }
            set
            {
                if (!ReferenceEquals(_personalTVGuideMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_personalTVGuideMaps != null)
                    {
                        _personalTVGuideMaps.CollectionChanged -= FixupPersonalTVGuideMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (PersonalTVGuideMap item in _personalTVGuideMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _personalTVGuideMaps = value;
                    if (_personalTVGuideMaps != null)
                    {
                        _personalTVGuideMaps.CollectionChanged += FixupPersonalTVGuideMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (PersonalTVGuideMap item in _personalTVGuideMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PersonalTVGuideMaps");
                }
            }
        }
        private TrackableCollection<PersonalTVGuideMap> _personalTVGuideMaps;
    
        [DataMember]
        public TrackableCollection<KeywordMap> KeywordMaps
        {
            get
            {
                if (_keywordMaps == null)
                {
                    _keywordMaps = new TrackableCollection<KeywordMap>();
                    _keywordMaps.CollectionChanged += FixupKeywordMaps;
                }
                return _keywordMaps;
            }
            set
            {
                if (!ReferenceEquals(_keywordMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("FixupChangeTrackingCollection kann nicht festgelegt werden, wenn ChangeTracking aktiviert ist.");
                    }
                    if (_keywordMaps != null)
                    {
                        _keywordMaps.CollectionChanged -= FixupKeywordMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Entfernen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten in der aktuellen Auflistung.
                        foreach (KeywordMap item in _keywordMaps)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _keywordMaps = value;
                    if (_keywordMaps != null)
                    {
                        _keywordMaps.CollectionChanged += FixupKeywordMaps;
                        // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                        // Fügen Sie den Löschweitergabe-Ereignishandler für alle EntitÃ¤ten hinzu, die sich bereits in der neuen Auflistung befinden.
                        foreach (KeywordMap item in _keywordMaps)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("KeywordMaps");
                }
            }
        }
        private TrackableCollection<KeywordMap> _keywordMaps;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PersonalTVGuideMaps.Clear();
            KeywordMaps.Clear();
        }

        #endregion
        #region Fixup für Zuordnungen
    
        private void FixupPersonalTVGuideMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PersonalTVGuideMap item in e.NewItems)
                {
                    item.Keyword = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PersonalTVGuideMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersonalTVGuideMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Keyword, this))
                    {
                        item.Keyword = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PersonalTVGuideMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupKeywordMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (KeywordMap item in e.NewItems)
                {
                    item.Keyword = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("KeywordMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Aktualisieren Sie den Ereignislistener, sodass er auf das neue abhÃ¤ngige Element verweist.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (KeywordMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Keyword, this))
                    {
                        item.Keyword = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("KeywordMaps", item);
                    }
                    // Dies ist das Prinzipalende einer Zuordnung, die Löschweitergaben durchführt.
                    // Entfernen Sie das vorherige abhÃ¤ngige Element aus dem Ereignislistener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
