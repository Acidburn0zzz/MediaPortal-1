//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Mediaportal.TV.Server.TVDatabase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Channel))]
    [KnownType(typeof(Schedule))]
    [KnownType(typeof(RecordingCredit))]
    [KnownType(typeof(ProgramCategory))]
    public partial class Recording: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IdRecording
        {
            get { return _idRecording; }
            set
            {
                if (_idRecording != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IdRecording' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _idRecording = value;
                    OnPropertyChanged("IdRecording");
                }
            }
        }
        private int _idRecording;
    
        [DataMember]
        public Nullable<int> IdChannel
        {
            get { return _idChannel; }
            set
            {
                if (_idChannel != value)
                {
                    ChangeTracker.RecordOriginalValue("IdChannel", _idChannel);
                    if (!IsDeserializing)
                    {
                        if (Channel != null && Channel.IdChannel != value)
                        {
                            Channel = null;
                        }
                    }
                    _idChannel = value;
                    OnPropertyChanged("IdChannel");
                }
            }
        }
        private Nullable<int> _idChannel;
    
        [DataMember]
        public int MediaType
        {
            get { return _mediaType; }
            set
            {
                if (_mediaType != value)
                {
                    _mediaType = value;
                    OnPropertyChanged("MediaType");
                }
            }
        }
        private int _mediaType;
    
        [DataMember]
        public System.DateTime StartTime
        {
            get { return _startTime; }
            set
            {
                if (_startTime != value)
                {
                    _startTime = value;
                    OnPropertyChanged("StartTime");
                }
            }
        }
        private System.DateTime _startTime;
    
        [DataMember]
        public System.DateTime EndTime
        {
            get { return _endTime; }
            set
            {
                if (_endTime != value)
                {
                    _endTime = value;
                    OnPropertyChanged("EndTime");
                }
            }
        }
        private System.DateTime _endTime;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string EpisodeName
        {
            get { return _episodeName; }
            set
            {
                if (_episodeName != value)
                {
                    _episodeName = value;
                    OnPropertyChanged("EpisodeName");
                }
            }
        }
        private string _episodeName;
    
        [DataMember]
        public string SeriesId
        {
            get { return _seriesId; }
            set
            {
                if (_seriesId != value)
                {
                    _seriesId = value;
                    OnPropertyChanged("SeriesId");
                }
            }
        }
        private string _seriesId;
    
        [DataMember]
        public Nullable<int> SeasonNumber
        {
            get { return _seasonNumber; }
            set
            {
                if (_seasonNumber != value)
                {
                    _seasonNumber = value;
                    OnPropertyChanged("SeasonNumber");
                }
            }
        }
        private Nullable<int> _seasonNumber;
    
        [DataMember]
        public string EpisodeId
        {
            get { return _episodeId; }
            set
            {
                if (_episodeId != value)
                {
                    _episodeId = value;
                    OnPropertyChanged("EpisodeId");
                }
            }
        }
        private string _episodeId;
    
        [DataMember]
        public Nullable<int> EpisodeNumber
        {
            get { return _episodeNumber; }
            set
            {
                if (_episodeNumber != value)
                {
                    _episodeNumber = value;
                    OnPropertyChanged("EpisodeNumber");
                }
            }
        }
        private Nullable<int> _episodeNumber;
    
        [DataMember]
        public Nullable<int> EpisodePartNumber
        {
            get { return _episodePartNumber; }
            set
            {
                if (_episodePartNumber != value)
                {
                    _episodePartNumber = value;
                    OnPropertyChanged("EpisodePartNumber");
                }
            }
        }
        private Nullable<int> _episodePartNumber;
    
        [DataMember]
        public Nullable<bool> IsPreviouslyShown
        {
            get { return _isPreviouslyShown; }
            set
            {
                if (_isPreviouslyShown != value)
                {
                    _isPreviouslyShown = value;
                    OnPropertyChanged("IsPreviouslyShown");
                }
            }
        }
        private Nullable<bool> _isPreviouslyShown;
    
        [DataMember]
        public Nullable<System.DateTime> OriginalAirDate
        {
            get { return _originalAirDate; }
            set
            {
                if (_originalAirDate != value)
                {
                    _originalAirDate = value;
                    OnPropertyChanged("OriginalAirDate");
                }
            }
        }
        private Nullable<System.DateTime> _originalAirDate;
    
        [DataMember]
        public Nullable<int> IdProgramCategory
        {
            get { return _idProgramCategory; }
            set
            {
                if (_idProgramCategory != value)
                {
                    ChangeTracker.RecordOriginalValue("IdProgramCategory", _idProgramCategory);
                    if (!IsDeserializing)
                    {
                        if (ProgramCategory != null && ProgramCategory.IdProgramCategory != value)
                        {
                            ProgramCategory = null;
                        }
                    }
                    _idProgramCategory = value;
                    OnPropertyChanged("IdProgramCategory");
                }
            }
        }
        private Nullable<int> _idProgramCategory;
    
        [DataMember]
        public string Classification
        {
            get { return _classification; }
            set
            {
                if (_classification != value)
                {
                    _classification = value;
                    OnPropertyChanged("Classification");
                }
            }
        }
        private string _classification;
    
        [DataMember]
        public int Advisories
        {
            get { return _advisories; }
            set
            {
                if (_advisories != value)
                {
                    _advisories = value;
                    OnPropertyChanged("Advisories");
                }
            }
        }
        private int _advisories;
    
        [DataMember]
        public Nullable<bool> IsHighDefinition
        {
            get { return _isHighDefinition; }
            set
            {
                if (_isHighDefinition != value)
                {
                    _isHighDefinition = value;
                    OnPropertyChanged("IsHighDefinition");
                }
            }
        }
        private Nullable<bool> _isHighDefinition;
    
        [DataMember]
        public Nullable<bool> IsThreeDimensional
        {
            get { return _isThreeDimensional; }
            set
            {
                if (_isThreeDimensional != value)
                {
                    _isThreeDimensional = value;
                    OnPropertyChanged("IsThreeDimensional");
                }
            }
        }
        private Nullable<bool> _isThreeDimensional;
    
        [DataMember]
        public Nullable<bool> IsLive
        {
            get { return _isLive; }
            set
            {
                if (_isLive != value)
                {
                    _isLive = value;
                    OnPropertyChanged("IsLive");
                }
            }
        }
        private Nullable<bool> _isLive;
    
        [DataMember]
        public Nullable<int> ProductionYear
        {
            get { return _productionYear; }
            set
            {
                if (_productionYear != value)
                {
                    _productionYear = value;
                    OnPropertyChanged("ProductionYear");
                }
            }
        }
        private Nullable<int> _productionYear;
    
        [DataMember]
        public string ProductionCountry
        {
            get { return _productionCountry; }
            set
            {
                if (_productionCountry != value)
                {
                    _productionCountry = value;
                    OnPropertyChanged("ProductionCountry");
                }
            }
        }
        private string _productionCountry;
    
        [DataMember]
        public Nullable<decimal> StarRating
        {
            get { return _starRating; }
            set
            {
                if (_starRating != value)
                {
                    _starRating = value;
                    OnPropertyChanged("StarRating");
                }
            }
        }
        private Nullable<decimal> _starRating;
    
        [DataMember]
        public Nullable<decimal> StarRatingMaximum
        {
            get { return _starRatingMaximum; }
            set
            {
                if (_starRatingMaximum != value)
                {
                    _starRatingMaximum = value;
                    OnPropertyChanged("StarRatingMaximum");
                }
            }
        }
        private Nullable<decimal> _starRatingMaximum;
    
        [DataMember]
        public bool IsRecording
        {
            get { return _isRecording; }
            set
            {
                if (_isRecording != value)
                {
                    _isRecording = value;
                    OnPropertyChanged("IsRecording");
                }
            }
        }
        private bool _isRecording;
    
        [DataMember]
        public Nullable<int> IdSchedule
        {
            get { return _idSchedule; }
            set
            {
                if (_idSchedule != value)
                {
                    ChangeTracker.RecordOriginalValue("IdSchedule", _idSchedule);
                    if (!IsDeserializing)
                    {
                        if (Schedule != null && Schedule.IdSchedule != value)
                        {
                            Schedule = null;
                        }
                    }
                    _idSchedule = value;
                    OnPropertyChanged("IdSchedule");
                }
            }
        }
        private Nullable<int> _idSchedule;
    
        [DataMember]
        public string FileName
        {
            get { return _fileName; }
            set
            {
                if (_fileName != value)
                {
                    _fileName = value;
                    OnPropertyChanged("FileName");
                }
            }
        }
        private string _fileName;
    
        [DataMember]
        public int KeepMethod
        {
            get { return _keepMethod; }
            set
            {
                if (_keepMethod != value)
                {
                    _keepMethod = value;
                    OnPropertyChanged("KeepMethod");
                }
            }
        }
        private int _keepMethod;
    
        [DataMember]
        public Nullable<System.DateTime> KeepUntilDate
        {
            get { return _keepUntilDate; }
            set
            {
                if (_keepUntilDate != value)
                {
                    _keepUntilDate = value;
                    OnPropertyChanged("KeepUntilDate");
                }
            }
        }
        private Nullable<System.DateTime> _keepUntilDate;
    
        [DataMember]
        public int WatchedCount
        {
            get { return _watchedCount; }
            set
            {
                if (_watchedCount != value)
                {
                    _watchedCount = value;
                    OnPropertyChanged("WatchedCount");
                }
            }
        }
        private int _watchedCount;
    
        [DataMember]
        public int StopTime
        {
            get { return _stopTime; }
            set
            {
                if (_stopTime != value)
                {
                    _stopTime = value;
                    OnPropertyChanged("StopTime");
                }
            }
        }
        private int _stopTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Channel Channel
        {
            get { return _channel; }
            set
            {
                if (!ReferenceEquals(_channel, value))
                {
                    var previousValue = _channel;
                    _channel = value;
                    FixupChannel(previousValue);
                    OnNavigationPropertyChanged("Channel");
                }
            }
        }
        private Channel _channel;
    
        [DataMember]
        public Schedule Schedule
        {
            get { return _schedule; }
            set
            {
                if (!ReferenceEquals(_schedule, value))
                {
                    var previousValue = _schedule;
                    _schedule = value;
                    FixupSchedule(previousValue);
                    OnNavigationPropertyChanged("Schedule");
                }
            }
        }
        private Schedule _schedule;
    
        [DataMember]
        public TrackableCollection<RecordingCredit> RecordingCredits
        {
            get
            {
                if (_recordingCredits == null)
                {
                    _recordingCredits = new TrackableCollection<RecordingCredit>();
                    _recordingCredits.CollectionChanged += FixupRecordingCredits;
                }
                return _recordingCredits;
            }
            set
            {
                if (!ReferenceEquals(_recordingCredits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_recordingCredits != null)
                    {
                        _recordingCredits.CollectionChanged -= FixupRecordingCredits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (RecordingCredit item in _recordingCredits)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _recordingCredits = value;
                    if (_recordingCredits != null)
                    {
                        _recordingCredits.CollectionChanged += FixupRecordingCredits;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (RecordingCredit item in _recordingCredits)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("RecordingCredits");
                }
            }
        }
        private TrackableCollection<RecordingCredit> _recordingCredits;
    
        [DataMember]
        public ProgramCategory ProgramCategory
        {
            get { return _programCategory; }
            set
            {
                if (!ReferenceEquals(_programCategory, value))
                {
                    var previousValue = _programCategory;
                    _programCategory = value;
                    FixupProgramCategory(previousValue);
                    OnNavigationPropertyChanged("ProgramCategory");
                }
            }
        }
        private ProgramCategory _programCategory;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Channel = null;
            Schedule = null;
            RecordingCredits.Clear();
            ProgramCategory = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupChannel(Channel previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Recordings.Contains(this))
            {
                previousValue.Recordings.Remove(this);
            }
    
            if (Channel != null)
            {
                if (!Channel.Recordings.Contains(this))
                {
                    Channel.Recordings.Add(this);
                }
    
                IdChannel = Channel.IdChannel;
            }
            else if (!skipKeys)
            {
                IdChannel = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Channel")
                    && (ChangeTracker.OriginalValues["Channel"] == Channel))
                {
                    ChangeTracker.OriginalValues.Remove("Channel");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Channel", previousValue);
                }
                if (Channel != null && !Channel.ChangeTracker.ChangeTrackingEnabled)
                {
                    Channel.StartTracking();
                }
            }
        }
    
        private void FixupSchedule(Schedule previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Recordings.Contains(this))
            {
                previousValue.Recordings.Remove(this);
            }
    
            if (Schedule != null)
            {
                if (!Schedule.Recordings.Contains(this))
                {
                    Schedule.Recordings.Add(this);
                }
    
                IdSchedule = Schedule.IdSchedule;
            }
            else if (!skipKeys)
            {
                IdSchedule = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Schedule")
                    && (ChangeTracker.OriginalValues["Schedule"] == Schedule))
                {
                    ChangeTracker.OriginalValues.Remove("Schedule");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Schedule", previousValue);
                }
                if (Schedule != null && !Schedule.ChangeTracker.ChangeTrackingEnabled)
                {
                    Schedule.StartTracking();
                }
            }
        }
    
        private void FixupProgramCategory(ProgramCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Recordings.Contains(this))
            {
                previousValue.Recordings.Remove(this);
            }
    
            if (ProgramCategory != null)
            {
                if (!ProgramCategory.Recordings.Contains(this))
                {
                    ProgramCategory.Recordings.Add(this);
                }
    
                IdProgramCategory = ProgramCategory.IdProgramCategory;
            }
            else if (!skipKeys)
            {
                IdProgramCategory = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProgramCategory")
                    && (ChangeTracker.OriginalValues["ProgramCategory"] == ProgramCategory))
                {
                    ChangeTracker.OriginalValues.Remove("ProgramCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProgramCategory", previousValue);
                }
                if (ProgramCategory != null && !ProgramCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProgramCategory.StartTracking();
                }
            }
        }
    
        private void FixupRecordingCredits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (RecordingCredit item in e.NewItems)
                {
                    item.Recording = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("RecordingCredits", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RecordingCredit item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recording, this))
                    {
                        item.Recording = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("RecordingCredits", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
